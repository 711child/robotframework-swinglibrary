*Setting*	*Value*
library	Collections
library	SwingLibrary
suiteSetup	setJemmyTimeouts	1

*Variable*	*Value*	*Value*
${treeName}	testTree
${nodeIndex}	2
${rootNode}	The Java Series
${childNode1}	Books for Java Programmers
${childNode2}	Books for Java Implementers
${leafNode}	The Java Tutorial: A Short Course on the Basics
${leafNode2}	The Java Tutorial Continued: The Rest of the JDK
${anotherNodePath}	${rootNode}|${childNode1}
${leafNodePath}	${anotherNodePath}|${leafNode}
${insertChildMenuEntry}	Insert a child
${childCount}	6

*Test Case*	*Action*	*Argument*	*Argument*
Expand Node by Index
	expandTreeNode	${treeName}	0
	expandTreeNode	${treeName}	${nodeIndex}
	treeNodeShouldBeExpanded	${treeName}	${nodeIndex}
	collapseTreeNode	${treeName}	${nodeIndex}
	collapseTreeNode	${treeName}	0

Expand Node By Name
	expandTreeNode	${treeName}	${rootNode}
	expandTreeNode	${treeName}	${anotherNodePath}
	treeNodeShouldBeExpanded	${treeName}	${anotherNodePath}
	collapseTreeNode	${treeName}	${anotherNodePath}
	collapseTreeNode	${treeName}	${rootNode}

Collapse Node By Index
	expandTreeNode	${treeName}	0
	expandTreeNode	${treeName}	${nodeIndex}
	treeNodeShouldBeExpanded	${treeName}	${nodeIndex}
	collapseTreeNode	${treeName}	${nodeIndex}
	treeNodeShouldBeCollapsed	${treeName}	${nodeIndex}
	collapseTreeNode	${treeName}	${nodeIndex}
	collapseTreeNode	${treeName}	0

Collapse Node By Name
	expandTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeExpanded	${treeName}	${rootNode}
	collapseTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeCollapsed	${treeName}	${rootNode}
	collapseTreeNode	${treeName}	${rootNode}

Tree Node Should Be Collapsed
	collapseTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeCollapsed	${treeName}	0
	treeNodeShouldBeCollapsed	${treeName}	${rootNode}

Tree Node Should Be Expanded
	expandTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeExpanded	${treeName}	0
	treeNodeShouldBeExpanded	${treeName}	${rootNode}

Select Tree Node By Index
	clearTreeSelection	${treeName}
	selectTreeNode	${treeName}	0
	treeNodeShouldBeSelected	${treeName}	0
	unselectTreeNode	${treeName}	0

Select Tree Node By Name
	clearTreeSelection	${treeName}
	selectTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeSelected	${treeName}	${rootNode}
	[teardown]	unselectTreeNode	${treeName}	${rootNode}

Select Tree Node Keyword Selects Multiple Nodes
	clearTreeSelection	${treeName}
	selectTreeNode	${treeName}	${rootNode}|${childNode1}	${rootNode}|${childNode2}
	treeNodeShouldBeSelected	${treeName}	${rootNode}|${childNode1}
	treeNodeShouldBeSelected	${treeName}	${rootNode}|${childNode2}

Unselect Tree Node By Index
	clearTreeSelection	${treeName}
	selectTreeNode	${treeName}	0
	unselectTreeNode	${treeName}	0
	treeNodeShouldNotBeSelected	${treeName}	0

Unselect Tree Node By name
	clearTreeSelection	${treeName}
	selectTreeNode	${treeName}	${rootNode}
	unselectTreeNode	${treeName}	${rootNode}
	treeNodeShouldNotBeSelected	${treeName}	${rootNode}

Tree Node Should Be Selected AND Tree Node Should Not Be Selected
	clearTreeSelection	${treeName}
	treeNodeShouldNotBeSelected	${treeName}	0
	treeNodeShouldNotBeSelected	${treeName}	${rootNode}
	selectTreeNode	${treeName}	0
	treeNodeShouldBeSelected	${treeName}	0
	treeNodeShouldBeSelected	${treeName}	${rootNode}

Select From Tree Node Popup Menu
	selectFromTreeNodePopupMenu	${treeName}	${rootNode}	${insertChildMenuEntry}
	expandTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeVisible	${treeName}	${rootNode}|child
	selectFromTreeNodePopupMenu	${treeName}	${rootNode}|child	Remove

Select From Tree Node Popup Menu Should Accept Only Exact Matches For Menupaths
	runKeywordAndExpectError	*	selectFromTreeNodePopupMenu	${treeName}	${rootNode}	Submenu|Enabled

Select From Tree Node Popup Menu Fails If Menu Item Is Disabled	[tags]	development
	runKeywordAndExpectError	Menu item 'Disabled menuitem' was disabled.	selectFromTreeNodePopupMenu	${treeName}	${rootNode}	Disabled menuitem

Select From Tree Node Popup Menu In Separate Thread
	selectFromTreeNodePopupMenuInSeparateThread	${treeName}	${rootNode}	Show dialog
	dialogShouldBeOpen	Message
	closeDialog	Message

Tree Node Should Be Visible AND Tree Node Should Not Be Visible
	treeNodeShouldBeVisible	${treeName}	${rootNode}
	expandTreeNode	${treeName}	${rootNode}
	treeNodeShouldBeVisible	${treeName}	${anotherNodePath}
	expandTreeNode	${treeName}	${anotherNodePath}
	treeNodeShouldBeVisible	${treeName}	${leafNodePath}
	collapseTreeNode	${treeName}	${rootNode}
	treeNodeShouldNotBeVisible	${treeName}	${anotherNodePath}
	treeNodeShouldNotBeVisible	${treeName}	${leafNodePath}

Tree Node Should Be Leaf AND Tree Node Should Not Be Leaf
	expandTreeNode	${treeName}	${rootNode}
	expandTreeNode	${treeName}	${anotherNodePath}
	treeNodeShouldBeLeaf	${treeName}	${leafNodePath}
	treeNodeShouldNotBeLeaf	${treeName}	${anotherNodePath}
	collapseTreeNode	${treeName}	${rootNode}
	treeNodeShouldNotBeLeaf	${treeName}	${rootNode}

Tree Node Should Exist By Name
	treeNodeShouldExist	${treeName}	${rootNode}
	treeNodeShouldExist	${treeName}	${anotherNodePath}
	treeNodeShouldExist	${treeName}	${leafNodePath}

Tree Node Should Exist By Index
	treeNodeShouldExist	${treeName}	0

Tree Node Should Not Exist By Name
	treeNodeShouldNotExist	${treeName}	Unexisting|node|name
	treeNodeShouldNotExist	${treeName}	Unexisting_root_node_name

Tree Node Should Not Exist By Index
	treeNodeShouldNotExist	${treeName}	9999

Test Selecting Multiple Nodes
	expandTreeNode	${treeName}	${rootNode}
	clearTreeSelection	${treeName}
	selectTreeNode	${treeName}	${rootNode}
	selectTreeNode	${treeName}	${anotherNodePath}
	treeNodeShouldBeSelected	${treeName}	${rootNode}
	treeNodeShouldBeSelected	${treeName}	${anotherNodePath}
	collapseTreeNode	${treeName}	${rootNode}
	clearTreeSelection	${treeName}

Tree Node Popup Menu Item Should Be Enabled
	treeNodePopupMenuItemShouldBeEnabled	${treeName}	${rootNode}	${insertChildMenuEntry}
	treeNodePopupMenuItemShouldBeEnabled	${treeName}	${rootNode}	Submenu|Enabled menuitem
	popupMenuShouldNotBeDisplayed

Tree Node Popup Menu Item Should Be Disabled
	treeNodePopupMenuItemShouldBeDisabled	${treeName}	${rootNode}	Disabled menuitem
	treeNodePopupMenuItemShouldBeDisabled	${treeName}	${rootNode}	Submenu|Disabled menuitem
	popupMenuShouldNotBeDisplayed

Tree Node Popup Menu Item Should Be Disabled Should Fail If Menu Item Is Enabled
	runKeywordAndExpectError	*Menu item '${insertChildMenuEntry}' was enabled*	treeNodePopupMenuItemShouldBeDisabled	${treeName}	${rootNode}	${insertChildMenuEntry}

Tree Node Popup Menu Item Should Be Enabled Should Fail If Menu Item Is Disabled
	runKeywordAndExpectError	*Menu item 'Disabled menuitem' was disabled*	treeNodePopupMenuItemShouldBeEnabled	${treeName}	${rootNode}	Disabled menuitem

Get Tree Node Count Returns The Count Of All Visible Nodes
	[setup]	resetNodes
	${visibleNodes}=	getTreeNodeCount	${treeName}
	shouldBeEqualAsIntegers	3	${visibleNodes}
	expandTreeNode	${treeName}	${rootNode}|${childNode1}
	${visibleNodes}=	getTreeNodeCount	${treeName}
	shouldBeEqualAsIntegers	6	${visibleNodes}
	collapseTreeNode	${treeName}	${rootNode}|${childNode1}
	${visibleNodes}=	getTreeNodeCount	${treeName}
	shouldBeEqualAsIntegers	3	${visibleNodes}
	hideRootNode
	${visibleNodes}=	getTreeNodeCount	${treeName}
	shouldBeEqualAsIntegers	2	${visibleNodes}

Select From Popup Menu On Selected Tree Nodes Keyword Operates On All Selected Nodes
	[setup]	resetNodes
	selectFromPopupMenuOnSelectedTreeNodesKeywordOperatesOnAllSelectedNodes

Get Tree Node Label Keyword Returns The Last Nodes Name
	[setup]	resetNodes
	expandTreeNode	${treeName}	${rootNode}|${childNode1}
	${treeNodeLabel}=	getTreeNodeLabel	${treeName}	3
	shouldBeEqual	${leafNode2}	${treeNodeLabel}

Get Tree Node Label Keyword Works With Hidden Root
	[setup]	resetNodes
	expandTreeNode	${treeName}	${rootNode}|${childNode1}
	hideRootNode
	${treeNodeLabel}=	getTreeNodeLabel	${treeName}	2
	shouldBeEqual	${leafNode2}	${treeNodeLabel}

Get Tree Node Index Keyword Returns The Node Index
	[setup]	resetNodes
	expandTreeNode	${treeName}	${rootNode}|${childNode1}
	${nodeIndex}=	getTreeNodeIndex	${treeName}	${rootNode}|${childNode1}|${leafNode2}
	shouldBeEqualAsIntegers	3	${nodeIndex}

Get Tree Node Index Keyword Works With Hidden Root
	[setup]	resetNodes
	expandTreeNode	${treeName}	${rootNode}|${childNode1}
	hideRootNode
	${nodeIndex}=	getTreeNodeIndex	${treeName}	${childNode1}|${leafNode2}
	shouldBeEqualAsIntegers	2	${nodeIndex}

Click On Tree Node
	[setup]	clearSavedNodes
	clickOnTreeNode	${treeName}	${childNode1}|${leafNode2}	3
	clickedNodesShouldBe	${leafNode2}
	clickCountShouldBe	3

Keywords Also Work With Unnamed Root
	[setup]	resetNodes
	selectFromTreeNodePopupMenu	0	${rootNode}	Remove root name
	selectFromTreeNodePopupMenu	0		Restore root name

Keywords Also Work With Invisible Root
	[setup]	resetNodes
	hideRootNode
	treeNodeShouldBeVisible	${treeName}	${childNode2}
	treeNodeShouldBeVisible	${treeName}	${childNode1}
	treeNodeShouldExist	${treeName}	${childNode2}
	treeNodeShouldExist	${treeName}	${childNode1}
	treeNodeShouldExist	${treeName}	${childNode1}|${leafNode}
	expandTreeNode	${treeName}	${childNode1}
	treeNodeShouldBeVisible	${treeName}	${childNode1}|${leafNode}
	collapseTreeNode	${treeName}	${childNode1}
	selectFromPopupMenuOnSelectedTreeNodesKeywordOperatesOnAllSelectedNodes	${EMPTY}
	[teardown]	selectFromTreeNodePopupMenu	${treeName}	0	Show root node

Tree Keywords Fail If Context Is Not Correct
	selectEmptyContext
	keywordShouldFailBecauseContextIsIllegal	clearTreeSelection	${treeName}
	keywordShouldFailBecauseContextIsIllegal	expandTreeNode	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	collapseTreeNode	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldBeExpanded	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldBeCollapsed	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	selectFromTreeNodePopupMenu	${treeName}	Path|To|Tree|Node	SomethingInMenu
	keywordShouldFailBecauseContextIsIllegal	selectFromTreeNodePopupMenuInSeparateThread	${treeName}	Path|To|Tree|Node	SomethingInMenu
	keywordShouldFailBecauseContextIsIllegal	selectTreeNode	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	unselectTreeNode	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldBeSelected	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldNotBeSelected	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldBeVisible	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldNotBeVisible	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldBeLeaf	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldNotBeLeaf	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldExist	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodeShouldNotExist	${treeName}	Path|To|Tree|Node
	keywordShouldFailBecauseContextIsIllegal	treeNodePopupMenuItemShouldBeDisabled	${treeName}	Path|To|Tree|Node	SomethingInMenu
	keywordShouldFailBecauseContextIsIllegal	treeNodePopupMenuItemShouldBeDisabled	${treeName}	Path|To|Tree|Node	SomethingInMenu
	keywordShouldFailBecauseContextIsIllegal	selectFromPopupMenuOnSelectedTreeNodes	${treeName}	SomethingInMenu
	keywordShouldFailBecauseContextIsIllegal	getTreeNodeLabel	${treeName}	0
	[teardown]	selectMainWindow

*Keyword*	*Action*	*Argument*	*Argument*
keywordShouldFailBecauseContextIsIllegal	[arguments]	${keyword}	@{arguments}
	runKeywordAndExpectError	*To use this keyword you must first select a correct context*	${keyword}	@{arguments}

popupMenuShouldNotBeDisplayed
	componentShouldNotExist	popupMenu

resetNodes
	selectFromTreeNodePopupMenu	${treeName}	0	Show root node
	expandTreeNode	${treeName}	${rootNode}
	collapseTreeNode	${treeName}	${rootNode}|${childNode1}
	collapseTreeNode	${treeName}	${rootNode}|${childNode2}

selectFromPopupMenuOnSelectedTreeNodesKeywordOperatesOnAllSelectedNodes	[arguments]	${root}=${rootNode}|
	clearSavedNodes
	selectNodes	${root}
	selectFromPopupMenuOnSelectedTreeNodes	${treeName}	Save node paths
	nodesShouldBeSaved

selectNodes	[arguments]	${root}=${rootNode}|
	selectTreeNode	${treeName}	${root}${childNode2}
	selectTreeNode	${treeName}	${root}${childNode1}

nodesShouldBeSaved
	savedNodesShouldBe	${childNode2}	${childNode1}

hideRootNode	[arguments]	${root}=${rootNode}
	selectFromTreeNodePopupMenu	${treeName}	${root}	Hide root node
